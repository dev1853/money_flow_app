"""add_counterparty_fk_to_transactions

Revision ID: e215812a7706
Revises: 
Create Date: 2025-07-09 19:32:54.322558

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e215812a7706'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP INDEX IF EXISTS ix_planned_payments_payment_date") # <-- ИЗМЕНЕНИЕ ЗДЕСЬ
    op.execute("DROP TABLE IF EXISTS planned_payments")
    op.alter_column('transactions', 'amount',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.Numeric(precision=10, scale=2),
               existing_nullable=False)
    op.alter_column('transactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('transactions', 'workspace_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_transactions_description', table_name='transactions')
    op.drop_constraint('transactions_workspace_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('transactions_user_id_fkey', 'transactions', type_='foreignkey')
    op.create_foreign_key(None, 'transactions', 'workspaces', ['workspace_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'transactions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.create_foreign_key('transactions_user_id_fkey', 'transactions', 'users', ['user_id'], ['id'])
    op.create_foreign_key('transactions_workspace_id_fkey', 'transactions', 'workspaces', ['workspace_id'], ['id'])
    op.create_index('ix_transactions_description', 'transactions', ['description'], unique=False)
    op.alter_column('transactions', 'workspace_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('transactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('transactions', 'amount',
               existing_type=sa.Numeric(precision=10, scale=2),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=False)
    op.create_table('planned_payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False, comment='Описание платежа'),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Сумма платежа (всегда положительная)'),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=False, comment='Планируемая дата'),
    sa.Column('payment_type', postgresql.ENUM('INCOME', 'EXPENSE', name='paymenttype'), autoincrement=False, nullable=False, comment='Тип: доход или расход'),
    sa.Column('is_recurring', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('recurrence_rule', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Правило повторения (напр., RRULE)'),
    sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='planned_payments_owner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='planned_payments_workspace_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='planned_payments_pkey')
    )
    op.create_index('ix_planned_payments_payment_date', 'planned_payments', ['payment_date'], unique=False)
    # ### end Alembic commands ###