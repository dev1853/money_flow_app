"""Fix null is_superuser values in users table

Revision ID: c3368000f61c
Revises: 52f7c5890f65
Create Date: 2025-06-18 17:08:14.281646

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c3368000f61c'
down_revision: Union[str, None] = '52f7c5890f65'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Сначала, убедимся, что столбец 'is_superuser' существует и является nullable (если он еще не NOT NULL)
    # Это может быть необходимо, если предыдущая миграция не прошла полностью
    # Или просто пропустить, если мы уверены, что add_column уже был выполнен в предыдущих миграциях.
    # Если столбец уже NOT NULL, этот шаг не нужен.

    # 2. Обновляем все NULL значения в is_superuser на FALSE
    op.execute("UPDATE users SET is_superuser = FALSE WHERE is_superuser IS NULL")
    print("Updated NULL 'is_superuser' values to FALSE in 'users' table.")

    # 3. (Опционально) Если столбец еще не NOT NULL, делаем его таковым.
    # Это можно сделать через alter_column, если в models.py он уже отмечен как nullable=False.
    # Если alembic auto-генерировал alter_column ранее, то этот блок может быть лишним.
    # Но если он падал, то, возможно, его стоит добавить.
    # with op.batch_alter_table('users', schema=None) as batch_op:
    #     batch_op.alter_column('is_superuser',
    #                existing_type=sa.Boolean(),
    #                nullable=False,
    #                existing_nullable=True)
    #     print("Set 'is_superuser' to NOT NULL in 'users' table.")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Обратная операция: если мы делали is_superuser NOT NULL, возвращаем nullable=True
    # Если мы только обновляли данные, то здесь ничего не нужно делать или можно вернуть NULL
    # with op.batch_alter_table('users', schema=None) as batch_op:
    #     batch_op.alter_column('is_superuser',
    #                existing_type=sa.Boolean(),
    #                nullable=True,
    #                existing_nullable=False)
    pass
    # ### end Alembic commands ###