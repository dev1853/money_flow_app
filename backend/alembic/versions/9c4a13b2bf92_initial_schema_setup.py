"""Initial schema setup

Revision ID: 9c4a13b2bf92
Revises: 
Create Date: 2025-07-03 22:30:34.284080

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9c4a13b2bf92'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # =========================================================================
    # ЧАСТЬ 1: СОЗДАНИЕ ВСЕХ ТАБЛИЦ (без внешних ключей внутри op.create_table)
    # Порядок здесь важен для удовлетворения базовых потребностей,
    # но все FK будут добавлены позже.
    # =========================================================================

    # 1. Создание таблицы 'roles' (обычно не имеет FK на другие основные таблицы)
    op.create_table('roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    # 2. Создание таблицы 'workspaces'
    # owner_id - это FK на users, будет добавлен позже.
    op.create_table('workspaces',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('owner_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'owner_id', name='_workspace_name_owner_uc')
    )

    # 3. Создание таблицы 'users'
    # role_id и active_workspace_id - FK, будут добавлены позже.
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('password_hash', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('is_superuser', sa.Boolean(), nullable=True),
        sa.Column('role_id', sa.Integer(), nullable=True),
        sa.Column('active_workspace_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )

    # 4. Создание таблицы 'account_types'
    op.create_table('account_types',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('code', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code'),
        sa.UniqueConstraint('name')
    )

    # 5. Создание таблицы 'dds_articles'
    # parent_id - FK на себя же, будет добавлен позже.
    op.create_table('dds_articles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('parent_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), default=True, nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    # 6. Создание таблицы 'accounts'
    # account_type_id, owner_id, workspace_id - FK, будут добавлены позже.
    op.create_table('accounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('balance', sa.Numeric(precision=10, scale=2), default=sa.text('0.0'), nullable=True),
        sa.Column('currency', sa.String(length=3), default='RUB', nullable=True),
        sa.Column('is_active', sa.Boolean(), default=True, nullable=True),
        sa.Column('account_type_id', sa.Integer(), nullable=False),
        sa.Column('owner_id', sa.Integer(), nullable=True),
        sa.Column('workspace_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    # 7. Создание таблицы 'transactions'
    # from_account_id, to_account_id, user_id, workspace_id - FK, будут добавлены позже.
    op.create_table('transactions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('transaction_date', sa.Date(), nullable=False),
        sa.Column('transaction_type', sa.Enum('INCOME', 'EXPENSE', 'TRANSFER', name='transactiontype'), nullable=False),
        sa.Column('from_account_id', sa.Integer(), nullable=False),
        sa.Column('to_account_id', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('workspace_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_check_constraint('check_transaction_amount_positive', 'transactions', 'amount > 0')

    # Создание таблицы 'budgets'
    op.create_table('budgets',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('start_date', sa.Date(), nullable=False),
        sa.Column('end_date', sa.Date(), nullable=False),
        sa.Column('owner_id', sa.Integer(), nullable=False), # Этот FK будет добавлен позже
        sa.Column('workspace_id', sa.Integer(), nullable=False), # Этот FK будет добавлен позже
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'workspace_id', 'start_date', 'end_date', name='_budget_name_workspace_period_uc')
    )

    # Создание таблицы 'budget_items'
    op.create_table('budget_items',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('budget_id', sa.Integer(), nullable=False), # Этот FK будет добавлен позже
        sa.Column('dds_article_id', sa.Integer(), nullable=False), # Этот FK будет добавлен позже
        sa.Column('budgeted_amount', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('type', sa.String(length=10), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_check_constraint('check_budget_item_amount_positive', 'budget_items', 'budgeted_amount > 0')


    # Создание таблицы 'mapping_rules'
    op.create_table('mapping_rules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('keyword', sa.String(), nullable=False),
        sa.Column('dds_article_id', sa.Integer(), nullable=True), # Этот FK будет добавлен позже
        sa.Column('workspace_id', sa.Integer(), nullable=False), # Этот FK будет добавлен позже
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('keyword', 'workspace_id', name='_keyword_workspace_uc')
    )


    # =========================================================================
    # ЧАСТЬ 2: ДОБАВЛЕНИЕ ВСЕХ ВНЕШНИХ КЛЮЧЕЙ ПОСЛЕ СОЗДАНИЯ ВСЕХ ТАБЛИЦ
    # =========================================================================

    # Внешние ключи для 'users'
    op.create_foreign_key('fk_users_roles', 'users', 'roles', ['role_id'], ['id'])
    op.create_foreign_key('fk_users_workspaces', 'users', 'workspaces', ['active_workspace_id'], ['id'])

    # Внешний ключ для 'workspaces' на 'users'
    op.create_foreign_key('fk_workspaces_users', 'workspaces', 'users', ['owner_id'], ['id'])

    # Внешний ключ для 'dds_articles' (самоссылающийся parent_id)
    op.create_foreign_key('fk_dds_articles_parent', 'dds_articles', 'dds_articles', ['parent_id'], ['id'])

    # Внешние ключи для 'accounts'
    op.create_foreign_key('fk_accounts_account_types', 'accounts', 'account_types', ['account_type_id'], ['id'])
    op.create_foreign_key('fk_accounts_users', 'accounts', 'users', ['owner_id'], ['id'])
    op.create_foreign_key('fk_accounts_workspaces', 'accounts', 'workspaces', ['workspace_id'], ['id'])

    # Внешние ключи для 'transactions'
    op.create_foreign_key('fk_transactions_from_account', 'transactions', 'accounts', ['from_account_id'], ['id'])
    op.create_foreign_key('fk_transactions_to_account', 'transactions', 'accounts', ['to_account_id'], ['id'])
    op.create_foreign_key('fk_transactions_users', 'transactions', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_transactions_workspaces', 'transactions', 'workspaces', ['workspace_id'], ['id'])

    # Внешние ключи для 'budgets'
    op.create_foreign_key('fk_budgets_users', 'budgets', 'users', ['owner_id'], ['id'])
    op.create_foreign_key('fk_budgets_workspaces', 'budgets', 'workspaces', ['workspace_id'], ['id'])

    # Внешние ключи для 'budget_items'
    op.create_foreign_key('fk_budget_items_budget', 'budget_items', 'budgets', ['budget_id'], ['id'])
    op.create_foreign_key('fk_budget_items_dds_article', 'budget_items', 'dds_articles', ['dds_article_id'], ['id'])

    # Внешние ключи для 'mapping_rules'
    op.create_foreign_key('fk_mapping_rules_dds_article', 'mapping_rules', 'dds_articles', ['dds_article_id'], ['id'])
    op.create_foreign_key(None, 'mapping_rules', 'workspaces', ['workspace_id'], ['id'])


    # =========================================================================
    # ЧАСТЬ 3: СОЗДАНИЕ ВСЕХ ИНДЕКСОВ
    # =========================================================================

    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_index(op.f('ix_workspaces_id'), 'workspaces', ['id'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_account_types_id'), 'account_types', ['id'], unique=False)
    op.create_index(op.f('ix_dds_articles_id'), 'dds_articles', ['id'], unique=False)
    op.create_index(op.f('ix_dds_articles_name'), 'dds_articles', ['name'], unique=True)
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index(op.f('ix_accounts_name'), 'accounts', ['name'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_description'), 'transactions', ['description'], unique=False)
    op.create_index(op.f('ix_transactions_transaction_date'), 'transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_budgets_id'), 'budgets', ['id'], unique=False)
    op.create_index(op.f('ix_budget_items_id'), 'budget_items', ['id'], unique=False)
    op.create_index(op.f('ix_mapping_rules_id'), 'mapping_rules', ['id'], unique=False)
    op.create_index(op.f('ix_mapping_rules_keyword'), 'mapping_rules', ['keyword'], unique=False)


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Удаление индексов (в обратном порядке)
    op.drop_index(op.f('ix_mapping_rules_keyword'), table_name='mapping_rules')
    op.drop_index(op.f('ix_mapping_rules_id'), table_name='mapping_rules')
    op.drop_index(op.f('ix_budget_items_id'), table_name='budget_items')
    op.drop_index(op.f('ix_budgets_id'), table_name='budgets')
    op.drop_index(op.f('ix_transactions_transaction_date'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_description'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_accounts_name'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_index(op.f('ix_dds_articles_name'), table_name='dds_articles')
    op.drop_index(op.f('ix_dds_articles_id'), table_name='dds_articles')
    op.drop_index(op.f('ix_account_types_id'), table_name='account_types')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_workspaces_id'), table_name='workspaces')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')

    # Удаление внешних ключей (drop_table обычно удаляет связанные FK, но explicit drop может быть полезен)
    # op.drop_constraint('fk_users_workspaces', 'users', type_='foreignkey')
    # op.drop_constraint('fk_workspaces_users', 'workspaces', type_='foreignkey')
    # ... другие drop_constraint ...

    # Удаление таблиц в обратном порядке зависимости
    op.drop_table('mapping_rules')
    op.drop_table('budget_items')
    op.drop_table('budgets')
    op.drop_table('transactions')
    op.drop_table('accounts')
    op.drop_table('dds_articles')
    op.drop_table('account_types')
    op.drop_table('users')
    op.drop_table('workspaces')
    op.drop_table('roles')

    # Если когда-то был создан enum accounttypeenum, его можно удалить здесь:
    # op.drop_type('accounttypeenum') # Удалить, если он больше нигде не используется

    # ### end Alembic commands ###