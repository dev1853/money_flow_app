"""clean_initial_schema

Revision ID: b88eecc3bf55
Revises:
Create Date: 2025-07-09 18:48:11.442005

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b88eecc3bf55'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_account_types_id'), 'account_types', ['id'], unique=False)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)

    # Создаем workspaces БЕЗ owner_id foreign key пока
    op.create_table('workspaces',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workspaces_id'), 'workspaces', ['id'], unique=False)
    op.create_index(op.f('ix_workspaces_name'), 'workspaces', ['name'], unique=False)

    # Создаем users БЕЗ active_workspace_id foreign key пока
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('active_workspace_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)

    # Теперь, когда обе таблицы созданы, добавляем внешние ключи для циклической зависимости
    op.create_foreign_key(
        'fk_users_active_workspace_id', 'users', 'workspaces',
        ['active_workspace_id'], ['id']
    )
    op.create_foreign_key(
        'fk_workspaces_owner_id', 'workspaces', 'users',
        ['owner_id'], ['id']
    )

    op.create_table('accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('balance', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('account_type_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['account_type_id'], ['account_types.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index(op.f('ix_accounts_name'), 'accounts', ['name'], unique=False)
    op.create_table('budgets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'workspace_id', 'start_date', 'end_date', name='_budget_name_workspace_period_uc')
    )
    op.create_index(op.f('ix_budgets_id'), 'budgets', ['id'], unique=False)
    op.create_table('counterparties',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False, comment='Название контрагента'),
    sa.Column('type', sa.Enum('CLIENT', 'SUPPLIER', 'EMPLOYEE', 'OTHER', name='counterpartytype'), nullable=False),
    sa.Column('inn', sa.String(), nullable=True, comment='ИНН'),
    sa.Column('contact_person', sa.String(), nullable=True, comment='Контактное лицо'),
    sa.Column('contact_info', sa.String(), nullable=True, comment='Контакты (телефон, email)'),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('inn')
    )
    op.create_index(op.f('ix_counterparties_id'), 'counterparties', ['id'], unique=False)
    op.create_index(op.f('ix_counterparties_name'), 'counterparties', ['name'], unique=False)
    op.create_table('dds_articles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('article_type', sa.String(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['dds_articles.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'workspace_id', name='_dds_article_name_workspace_uc')
    )
    op.create_index(op.f('ix_dds_articles_id'), 'dds_articles', ['id'], unique=False)
    op.create_index(op.f('ix_dds_articles_name'), 'dds_articles', ['name'], unique=False)
    op.create_table('budget_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('budgeted_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('type', sa.String(length=10), nullable=True),
    sa.Column('budget_id', sa.Integer(), nullable=False),
    sa.Column('dds_article_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('budgeted_amount > 0', name='check_budget_item_amount_positive'),
    sa.ForeignKeyConstraint(['budget_id'], ['budgets.id'], ),
    sa.ForeignKeyConstraint(['dds_article_id'], ['dds_articles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_budget_items_id'), 'budget_items', ['id'], unique=False)
    op.create_table('mapping_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('keyword', sa.String(), nullable=False),
    sa.Column('dds_article_id', sa.Integer(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['dds_article_id'], ['dds_articles.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('keyword', 'workspace_id', name='_keyword_workspace_uc')
    )
    op.create_index(op.f('ix_mapping_rules_id'), 'mapping_rules', ['id'], unique=False)
    op.create_index(op.f('ix_mapping_rules_keyword'), 'mapping_rules', ['keyword'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('transaction_type', sa.Enum('INCOME', 'EXPENSE', 'TRANSFER', name='transactiontype'), nullable=False),
    sa.Column('from_account_id', sa.Integer(), nullable=True),
    sa.Column('to_account_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('dds_article_id', sa.Integer(), nullable=True),
    sa.Column('counterparty_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('amount > 0', name='check_transaction_amount_positive'),
    sa.ForeignKeyConstraint(['counterparty_id'], ['counterparties.id'], ),
    sa.ForeignKeyConstraint(['dds_article_id'], ['dds_articles.id'], ),
    sa.ForeignKeyConstraint(['from_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['to_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transactions_counterparty_id'), 'transactions', ['counterparty_id'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_transaction_date'), 'transactions', ['transaction_date'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transactions_transaction_date'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_counterparty_id'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_mapping_rules_keyword'), table_name='mapping_rules')
    op.drop_index(op.f('ix_mapping_rules_id'), table_name='mapping_rules')
    op.drop_table('mapping_rules')
    op.drop_index(op.f('ix_budget_items_id'), table_name='budget_items')
    op.drop_table('budget_items')
    op.drop_index(op.f('ix_dds_articles_name'), table_name='dds_articles')
    op.drop_index(op.f('ix_dds_articles_id'), table_name='dds_articles')
    op.drop_table('dds_articles')
    op.drop_index(op.f('ix_counterparties_name'), table_name='counterparties')
    op.drop_index(op.f('ix_counterparties_id'), table_name='counterparties')
    op.drop_table('counterparties')
    op.drop_index(op.f('ix_budgets_id'), table_name='budgets')
    op.drop_table('budgets')
    op.drop_index(op.f('ix_accounts_name'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_table('accounts')
    
    # Отменяем добавление FK между users и workspaces
    op.drop_constraint('fk_users_active_workspace_id', 'users', type_='foreignkey')
    op.drop_constraint('fk_workspaces_owner_id', 'workspaces', type_='foreignkey')

    op.drop_index(op.f('ix_workspaces_name'), table_name='workspaces')
    op.drop_index(op.f('ix_workspaces_id'), table_name='workspaces')
    op.drop_table('workspaces')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_account_types_id'), table_name='account_types')
    op.drop_table('account_types')
    # ### end Alembic commands ###