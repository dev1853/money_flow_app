"""Add owner_id, workspace_id, currency, current_balance, is_active fields and default data creation logic

Revision ID: 2735f2d464ca
Revises: ba563651838a
Create Date: 2025-06-17 19:55:07.966630

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2735f2d464ca'
down_revision: Union[str, None] = '2ee18c7b625a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('reports')
    # with op.batch_alter_table('users', schema=None) as batch_op:
    #     batch_op.drop_index('ix_users_email')
    #     batch_op.drop_index('ix_users_full_name')
    #     batch_op.drop_index('ix_users_id')
    #     batch_op.drop_index('ix_users_username')

    # # op.drop_table('users')
    # with op.batch_alter_table('workspaces', schema=None) as batch_op:
    #     batch_op.drop_index('ix_workspaces_id')
    #     batch_op.drop_index('ix_workspaces_name')

    # op.drop_table('workspaces')
    # with op.batch_alter_table('accounts', schema=None) as batch_op:
    #     batch_op.drop_index('ix_accounts_id')
    #     batch_op.drop_index('ix_accounts_name')

    # op.drop_table('accounts')
    # with op.batch_alter_table('dds_articles', schema=None) as batch_op:
    #     batch_op.drop_index('ix_dds_articles_id')

    # op.drop_table('dds_articles')
    # with op.batch_alter_table('transactions', schema=None) as batch_op:
    #     batch_op.drop_index('ix_transactions_id')

    # op.drop_table('transactions')
    # with op.batch_alter_table('roles', schema=None) as batch_op:
    #     batch_op.drop_index('ix_roles_id')
    #     batch_op.drop_index('ix_roles_name')

    # op.drop_table('roles')
    
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index('ix_roles_name', ['name'], unique=True)
        batch_op.create_index('ix_roles_id', ['id'], unique=False)

    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('transaction_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dds_article_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name='transactions_account_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='transactions_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['dds_article_id'], ['dds_articles.id'], name='transactions_dds_article_id_fkey'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='transactions_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.create_index('ix_transactions_id', ['id'], unique=False)

    op.create_table('dds_articles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='dds_articles_owner_id_fkey'),
    sa.ForeignKeyConstraint(['parent_id'], ['dds_articles.id'], name='dds_articles_parent_id_fkey'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='dds_articles_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dds_articles_pkey')
    )
    with op.batch_alter_table('dds_articles', schema=None) as batch_op:
        batch_op.create_index('ix_dds_articles_id', ['id'], unique=False)

    op.create_table('accounts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('current_balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='accounts_owner_id_fkey'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='accounts_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey')
    )
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.create_index('ix_accounts_name', ['name'], unique=False)
        batch_op.create_index('ix_accounts_id', ['id'], unique=False)

    op.create_table('workspaces',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='workspaces_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workspaces_pkey')
    )
    with op.batch_alter_table('workspaces', schema=None) as batch_op:
        batch_op.create_index('ix_workspaces_name', ['name'], unique=False)
        batch_op.create_index('ix_workspaces_id', ['id'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='users_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('ix_users_username', ['username'], unique=True)
        batch_op.create_index('ix_users_id', ['id'], unique=False)
        batch_op.create_index('ix_users_full_name', ['full_name'], unique=False)
        batch_op.create_index('ix_users_email', ['email'], unique=True)

    op.create_table('reports',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='reports_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reports_pkey')
    )
    # ### end Alembic commands ###
