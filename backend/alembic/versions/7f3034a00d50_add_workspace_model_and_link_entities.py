"""Add Workspace model and link entities

Revision ID: 7f3034a00d50
Revises: 
Create Date: 2025-06-03 13:35:46.727998

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session # <-- Добавим Session для прямого использования
from sqlalchemy.dialects import postgresql

from app.models import User, Workspace, Account, DdsArticle, Transaction

# revision identifiers, used by Alembic.
revision: str = '7f3034a00d50'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Создание таблицы workspaces
    op.create_table(
        'workspaces',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False, server_default='Мое рабочее пространство'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workspaces_id'), 'workspaces', ['id'], unique=False)


    # 1. Добавление колонки workspace_id как NULLABLE
    op.add_column('accounts', sa.Column('workspace_id', sa.Integer(), nullable=True))
    op.add_column('dds_articles', sa.Column('workspace_id', sa.Integer(), nullable=True))
    op.add_column('transactions', sa.Column('workspace_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('workspace_id', sa.Integer(), nullable=True))


    # 2. Логика для заполнения существующих данных
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Получаем всех пользователей и создаем для них воркспейсы
        users = session.query(User).all()
        user_to_workspace_map = {} # Словарь для хранения связей user.id -> workspace.id

        if not users:
            # Если пользователей нет, создадим один общий воркспейс для всех данных
            # Это может быть необходимо, если есть "бесхозные" данные без пользователя
            default_workspace = Workspace(name="Основное рабочее пространство")
            session.add(default_workspace)
            session.flush() # Получаем ID для default_workspace
            default_workspace_id = default_workspace.id
        else:
            # Если пользователи есть, создадим воркспейсы для каждого пользователя
            for user in users:
                new_workspace = Workspace(name=f"Пространство пользователя {user.username}")
                session.add(new_workspace)
                session.flush() # Получаем ID для new_workspace
                user.workspace_id = new_workspace.id
                user_to_workspace_map[user.id] = new_workspace.id
            default_workspace_id = list(user_to_workspace_map.values())[0] # Берем ID первого созданного воркспейса как дефолтный

        # Обновляем все связанные сущности
        # Accounts и DdsArticles не привязаны напрямую к пользователю,
        # поэтому мы привяжем их к одному из созданных Workspace (например, к первому)
        # Если есть существующие данные в Account, DdsArticle, которым НЕ назначен user_id,
        # они будут привязаны к default_workspace_id.
        session.query(Account).filter(Account.workspace_id == None).update(
            {"workspace_id": default_workspace_id}, synchronize_session=False
        )
        session.query(DdsArticle).filter(DdsArticle.workspace_id == None).update(
            {"workspace_id": default_workspace_id}, synchronize_session=False
        )

        # Transactions привязаны к пользователю через created_by_user_id
        # Проходим по всем транзакциям, у которых нет workspace_id, и назначаем им workspace_id
        # на основе их created_by_user_id
        for transaction in session.query(Transaction).filter(Transaction.workspace_id == None).all():
            if transaction.created_by_user_id and transaction.created_by_user_id in user_to_workspace_map:
                transaction.workspace_id = user_to_workspace_map[transaction.created_by_user_id]
            else:
                # Если транзакция не связана с пользователем или пользователь не имеет воркспейса,
                # привязываем к дефолтному
                transaction.workspace_id = default_workspace_id

        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()

    # 3. Изменение колонки workspace_id на NOT NULL после заполнения
    op.alter_column('accounts', 'workspace_id',
               existing_type=sa.Integer(),
               nullable=False)
    op.alter_column('dds_articles', 'workspace_id',
               existing_type=sa.Integer(),
               nullable=False)
    op.alter_column('transactions', 'workspace_id',
               existing_type=sa.Integer(),
               nullable=False)
    op.alter_column('users', 'workspace_id',
               existing_type=sa.Integer(),
               nullable=True) # Оставляем nullable=True для пользователя, как и было в модели.
    
    # 4. Создание внешних ключей (после того, как колонки стали NOT NULL, кроме user.workspace_id)
    op.create_foreign_key('fk_accounts_workspace_id_workspaces', 'accounts', 'workspaces', ['workspace_id'], ['id'])
    op.create_foreign_key('fk_dds_articles_workspace_id_workspaces', 'dds_articles', 'workspaces', ['workspace_id'], ['id'])
    op.create_foreign_key('fk_transactions_workspace_id_workspaces', 'transactions', 'workspaces', ['workspace_id'], ['id'])
    op.create_foreign_key('fk_users_workspace_id_workspaces', 'users', 'workspaces', ['workspace_id'], ['id'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'users',
        'Пользователи системы',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               comment='Хеш пароля, сгенерированный с помощью, например, bcrypt',
               existing_nullable=False)
    op.drop_column('users', 'workspace_id')
    op.create_table_comment(
        'transactions',
        'Денежные операции (поступления и списания)',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_index(op.f('ix_transactions_transaction_date'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_dds_article_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_account_id'), table_name='transactions')
    op.create_index('idx_transactions_transaction_date', 'transactions', ['transaction_date'], unique=False)
    op.create_index('idx_transactions_dds_article_id', 'transactions', ['dds_article_id'], unique=False)
    op.create_index('idx_transactions_account_id', 'transactions', ['account_id'], unique=False)
    op.alter_column('transactions', 'created_by_user_id',
               existing_type=sa.INTEGER(),
               comment='ID пользователя, который создал/добавил операцию',
               existing_nullable=True)
    op.alter_column('transactions', 'dds_article_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transactions', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('transactions', 'amount',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Сумма операции. > 0 для прихода, < 0 для расхода',
               existing_nullable=False)
    op.alter_column('transactions', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('transactions', 'workspace_id')
    op.create_table_comment(
        'roles',
        'Роли пользователей в системе',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.create_unique_constraint('roles_name_key', 'roles', ['name'])
    op.alter_column('roles', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('dds_articles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('dds_articles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.create_table_comment(
        'dds_articles',
        'Справочник статей Движения Денежных Средств (ДДС)',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'dds_articles', type_='foreignkey')
    op.drop_constraint(None, 'dds_articles', type_='foreignkey')
    op.create_foreign_key('dds_articles_parent_id_fkey', 'dds_articles', 'dds_articles', ['parent_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_dds_articles_id'), table_name='dds_articles')
    op.drop_column('dds_articles', 'workspace_id')
    op.add_column('accounts', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('accounts', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.create_table_comment(
        'accounts',
        'Счета и кассы компании',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'accounts', type_='foreignkey')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_column('accounts', 'workspace_id')
    # ### end Alembic commands ###
