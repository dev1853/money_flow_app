"""Rename column type to account_type in accounts table

Revision ID: 950f1b84b192
Revises: c3368000f61c
Create Date: 2025-06-19 20:38:46.789386

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '950f1b84b192'
down_revision: Union[str, None] = 'c3368000f61c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reports')
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('account_type', sa.String(), nullable=True))
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('dds_articles', schema=None) as batch_op:
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_index(batch_op.f('ix_dds_articles_name'), ['name'], unique=False)

    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('workspace_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.drop_constraint('transactions_created_by_user_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_user_id')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('transactions_created_by_user_id_fkey', 'users', ['created_by_user_id'], ['id'])
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('workspace_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('dds_articles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dds_articles_name'))
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.alter_column('owner_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('account_type')

    op.create_table('reports',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='reports_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reports_pkey')
    )
    # ### end Alembic commands ###
